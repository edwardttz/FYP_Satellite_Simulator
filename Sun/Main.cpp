#include "stdafx.h"

using namespace std;

double eci[365] = { 
11450.348635,-11442.974788,10511.219368,-8776.497944,6250.2356634,-3234.0568631,
-148.000314,3464.337447,-6531.414031,8942.9733329,-10549.001905,11123.552999,
-10670.87551,9212.4482242,-6974.916848,4182.381106,-1211.517855,-1640.793435,
4031.086729,-5747.702905,6645.34222,-6714.978394,6057.034534,-4868.6042337,
3408.882349,-1948.074713,735.656033,65.0924584999993,-367.4202802,213.298191,
275.694649,-892.9439019,1405.399363,-1594.675435,1289.926248,-436.9771833,
-952.069675999999,2684.569276,-4571.729953,6256.958737,-7495.4631626,
7971.3692985,-7566.197747,6172.948988,-3951.208735,1011.7746979,2198.341179,
-5464.056076,8230.220685,-10319.5116626,11331.633967,-11258.658899,9989.7327228,
-7777.797889,4717.449622,-1310.179779,-2314.015376,5562.2554528,-8374.9440899,
10290.819512,-11354.983239,11348.868047,-10449.404864,8608.3188113,-6168.059518,
3120.565206,46.35259581,-3347.452914,6263.079931,-8788.6844033,10508.72657,
-11417.17174,11259.81055,-10153.643996,7989.4082642,-5137.9863858,1618.600977,
1981.599966,-5525.490135,8427.3406248,-10517.923411,11427.207095,-11153.216462,
9613.82208354,-7144.679606,3895.723554,-464.8331671,-2890.850856,5611.278558,
-7503.369017,8307.2659618,-8073.4476366,6883.813689,-5080.546875,2932.866898,
-887.147697999999,-820.957102800001,1923.053261,-2385.047581,2249.699649,
-1714.3259916,1032.453823,-480.727820000001,289.6711468,-580.325232,1365.309913,
-2494.0827429,3736.4421782,-4768.3256956,5294.939486,-5054.521441,3949.232725,
-1985.9490022,-611.244119,3531.931008,-6340.728926,8601.9776618,-9930.608334,
10060.3912504,-8902.722423,6545.406453,-3274.24171,-532.4370053,4352.967981,
-7747.4935771,10240.929843,-11577.245057,11567.844264,-10283.5135727,
7845.152797,-4628.397821,915.383846,2781.1108138,-6178.38515,8848.9291418,
-10621.497553,11283.425219,-10850.017204,9301.0362994,-6876.677755,3687.2967096,
-157.177761,-3490.656168,6790.130253,-9452.94350042,11127.519825,-11623.888973,
10792.798767,-8753.4492059,5609.038525,-1827.6779087,-2232.470477,5986.344762,
-8973.8897977,10794.609537,-11206.085745,10150.9871789,-7857.036929,4608.460397,
-988.8274421,-2526.283096,5404.635117,-7269.679912,7950.2092496,-7455.7736983,
5994.400184,-3966.628967,1758.748652,180.083694999999,-1564.693892,2247.298087,
-2245.982135,1765.1466467,-1085.804819,535.860571,-367.635637,729.827487,-1581.734461,
2744.10456963,-3895.173443,4678.801672,-4745.597891,3925.122355,-2136.456057,
-382.807607000001,3320.042042,-6159.316019,8385.210393,-9539.456304,9338.99094797,
-7674.140571,4780.267431,-983.2886831,-3109.940163,6909.957355,-9838.0377344,
11435.661343,-11473.915523,9962.4230601,-7100.793048,3333.636536,840.278859,
-4860.516091,8194.32925934,-10473.163238,11416.621368,-10973.064115,9218.6037252,
-6391.785158,2821.198515,1057.1672541,-4830.280575,8027.271862,-10302.9018552,
11343.391065,-11010.015887,9280.5358772,-6344.0653459,2516.917073,1699.556313,
-5753.408784,9072.5308769,-11153.894895,11679.152286,-10534.306716,7875.524487,
-4106.672717,-172.689672500001,4310.453604,-7611.020005,9628.1817759,-10039.701276,
8899.77699959999,-6477.018196,3298.392188,53.6651090000005,-2937.220212,4962.131528,
-5824.94207,5600.5903496,-4498.5097978,2946.745802,-1374.802255,186.909429,424.3446003,
-413.887927,-12.0129123000004,552.250461000001,-838.292731,589.924440700001,
314.504507000001,-1802.466211,3547.887127,-5157.123947,6109.7127832,-6046.364758,
4753.099577,-2315.651,-964.579851,4458.892723,-7603.735363,9643.6950027,-10200.037429,
9007.7414268,-6229.879839,2248.663815,2200.9738294,-6485.356186,9722.3746974,
-11512.565781,11446.535286,-9632.73530551,6320.025831,-2126.737463,-2404.796443,
6431.6181848,-9550.9153582,11174.158096,-11246.60919,9695.2916553,-6855.355847,
3021.359835,1138.2997677,-5235.398021,8525.6345387,-10720.599423,11352.811391,
-10406.008016,7862.2666042,-4165.8698504,-307.836165,4720.885494,-8539.0307271,
10983.006737,-11728.992268,10523.128489,-7628.181862,3432.6912901,1214.298091,
-5601.820434,8848.199348,-10472.967807,10176.739857,-8145.042825,4806.71822999999,
-929.370607999999,-2756.048045,5521.968354,-6956.878457,6927.3982542,-5658.5891099,
3608.984442,-1371.300893,-516.214729,1689.85178,-2037.886848,1721.8990916,
-1084.530344,545.7573081,-446.143081,936.591267000001,-1926.622212,3083.429901,
-3959.442686,4087.105327,-3184.357936,1194.3501423,1560.75312,-4593.18458,
7134.66801,-8577.1327589,8381.4990918,-6467.637269,3014.717849,1263.3859087,
-5659.601715,9127.7853102,-11058.388345,10899.16465,-8736.4081541,4844.782482,
-101.572947,-4791.045348,8725.0097024,-11184.554543,11599.720676,-10077.4591681,
6789.714799,-2507.097239,-2242.9342261,6437.684465,-9630.8723471,11146.841352,
-10923.449502,8864.9031679,-5464.50763,1042.560363,3465.568737,-7562.940242,
10362.5643006,-11516.465357,10637.078245,-7961.552527,3720.821835,1133.511754
};

void ExecuteSunPosition(const double JD, vector <EciSun>& sunPos, double eciX, double eciY, double eciZ);
void PrintSunParameters(const vector <EciSun>& sunPos);

int main()
{
	// Testing parameters for sun vector
	// Wednesday, A.D. 2017 Feb 15	15:38:45.2
	double JD = 2457800.151912;
	double eciX, eciY, eciZ;

	// Initialize vector for Sun Parameters
	vector<EciSun> sunPos;

	for (int i = 1; i <= 365; i++) {
		ExecuteSunPosition(JD, sunPos, eciX, eciY, eciZ);
		
		// ~Sampled every 24 hours
		JD += 1;
	}
	PrintSunParameters(sunPos);
}


//////////////////////////////////////////////////////////////////////
// Printing 
//////////////////////////////////////////////////////////////////////

void PrintSunParameters(const vector <EciSun>& sunPos)
{
	ofstream myfile;
	myfile.precision(12);

	// Save Satellite ECI position, Radius file
	myfile.open("SunPos_ECI.csv", ios::trunc);
	myfile << "No.of Days,Sun_X,Sun_Y,Sun_Z,Azmiuth,Elevation,Body Frame" << endl;
		for (unsigned int i = 0; i < sunPos.size(); i++)
		{
			myfile << i << ',' << sunPos[i].SunPosition().sun_x << ',' << sunPos[i].SunPosition().sun_y << ','
				<< sunPos[i].SunPosition().sun_z << ',' 
				<< sunPos[i].SunPosition().sun_azi << ','
				<< sunPos[i].SunPosition().sun_ele << ','
				<< sunPos[i].SunPosition().body_frame << endl;
		}
	myfile.close();
}

//////////////////////////////////////////////////////////////////////
// Printing 
//////////////////////////////////////////////////////////////////////

void ExecuteSunPosition(const double JD, vector<EciSun>& sunPos, double eciX, double eciY, double eciZ)
{
	EciSun e;
	e.setJulianDate(JD);
	e.calculateSunVec();
	e.computeBodyFrame(eciX, eciY, eciZ);
	sunPos.push_back(e);
	//e.computeBodyFrameSun(eci);
}
